# Bayrak Bilmece Oyunu - Proje Takibi

## Tamamlanan İşler ✅

### Temel Yapı
- [x] HTML dosyası oluşturuldu
- [x] CSS dosyası oluşturuldu
- [x] JavaScript dosyası oluşturuldu
- [x] Yerel bayrak dosyaları (SVG) entegre edildi
- [x] Ses efektleri entegre edildi
- [x] Ana sayfa tasarımı oluşturuldu
- [x] Oyun sayfası ayrı dosyaya taşındı (game.html)
- [x] Yönetim paneli oluşturuldu (admin.html)
- [x] Bayrak veritabanı oluşturuldu (flags.json)

### Oyun Özellikleri
- [x] Bayrak gösterimi
- [x] 4 seçenekli cevap sistemi
- [x] Skor sistemi
- [x] Yüksek skor kaydı (localStorage)
- [x] 30 saniyelik süre sınırı
- [x] 3 ipucu hakkı
- [x] Ses efektleri
  - [x] Doğru cevap
  - [x] Yanlış cevap
  - [x] Oyun sonu
  - [x] İpucu kullanımı
  - [x] Son 5 saniye tik sesi
- [x] Çoklu dil desteği altyapısı (TR/EN)
- [x] Hata yakalama ve ses kontrolü
- [x] Asenkron veri yükleme

### Yönetim Paneli
- [x] Bayrak listesi görüntüleme
- [x] Yeni bayrak ekleme
- [x] Bayrak silme
- [x] Toplu bayrak yükleme (CSV)
- [x] JSON dosya entegrasyonu
- [x] Asenkron veri işleme
- [x] Hata yakalama ve bildirim sistemi

### Tasarım
- [x] Responsive tasarım
- [x] Mobil uyumlu arayüz
- [x] Modern ve temiz görünüm
- [x] Animasyonlu butonlar
- [x] Doğru/yanlış cevap görsel geribildirimi
- [x] Gradient arka plan
- [x] Özellik kartları

## Yapılacak İşler 📋

### Özellik Geliştirmeleri
- [ ] Zorluk seviyeleri ekleme (Kolay, Orta, Zor)
- [ ] Oyun sonu istatistikleri
- [ ] Başarı rozetleri sistemi
- [ ] Çoklu dil arayüzü
- [ ] Oyun modları (Zaman yarışı, Sınırsız mod)

### Tasarım İyileştirmeleri
- [ ] Bayrak geçiş animasyonları
- [ ] Puan animasyonları
- [ ] Loading ekranı
- [ ] Tema seçenekleri (Açık/Koyu)
- [ ] İstatistik grafikleri

### Teknik İyileştirmeler
- [ ] Kod optimizasyonu
- [ ] Performans iyileştirmeleri
- [ ] Browser uyumluluk testleri
- [ ] Ses kontrolü ayarları
- [ ] Önbellek sistemi
- [ ] API endpoint'leri

### Dokümantasyon
- [ ] Kullanıcı kılavuzu
- [ ] Geliştirici dokümantasyonu
- [ ] Kurulum talimatları
- [ ] Katkı sağlama rehberi
- [ ] API dokümantasyonu

## Notlar 📝
- Bayrak dosyaları SVG formatında
- Ses dosyaları MP3 formatında
- Minimum tarayıcı desteği: son 2 versiyon
- Mobile-first yaklaşımı benimsendi
- Veriler flags.json dosyasında saklanıyor
- Asenkron veri işleme kullanılıyor
- Hata yakalama mekanizmaları aktif

## Dosya Yapısı 📂
C:\_WORK\cursor\bayrak13\
    ├── index.html
    ├── game.html
    ├── admin.html
    ├── assets/
    │   ├── css/
    │   │   ├── style.css
    │   │   ├── game.css
    │   │   └── admin.css
    │   ├── js/
    │   │   ├── config.js
    │   │   ├── utils.js
    │   │   ├── game.js
    │   │   └── admin.js
    │   └── data/
    │       └── flags.json
    ├── public/
    │   ├── flags/
    │   └── sounds/
    └── .cursorrules


# Bayrak verileri flags.json dosyasında, format: { "code": "tr", "name_tr": "Türkiye", "name_en": "Turkey" }

// Sabit değerleri konfigürasyon olarak ayıralım
const CONFIG = {
    GAME_DURATION: 30,
    HINTS_COUNT: 3,
    OPTIONS_COUNT: 4,
    COUNTDOWN_SOUND_THRESHOLD: 5
};

// Ses yönetimi için ayrı bir sınıf
class SoundManager {
    constructor() {
        this.sounds = {
            correct: document.getElementById('correct-sound'),
            wrong: document.getElementById('wrong-sound'),
            gameOver: document.getElementById('game-over-sound'),
            hint: document.getElementById('hint-sound'),
            tick: document.getElementById('tick-sound')
        };
    }

    play(soundName) {
        this.sounds[soundName]?.play().catch(err => 
            console.log(`Ses çalma hatası (${soundName}):`, err)
        );
    }
}

// Oyun mantığı için ayrı bir sınıf
class FlagGame {
    constructor() {
        this.soundManager = new SoundManager();
        this.countries = [];
        this.currentFlag = null;
        this.score = 0;
        this.timeLeft = CONFIG.GAME_DURATION;
        // ... diğer başlangıç değerleri
    }

    async init() {
        await this.loadFlags();
        this.setupEventListeners();
    }

    // ... diğer metodlar
}

// API işlemleri için ayrı bir sınıf
class FlagAPI {
    static async loadFlags() {
        const response = await fetch('flags.json');
        return await response.json();
    }

    static async saveFlags(flags) {
        const response = await fetch('flags.json', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(flags, null, 4)
        });
        return response.ok;
    }
}

// Yönetim paneli için ana sınıf
class AdminPanel {
    constructor() {
        this.flags = [];
        this.initElements();
        this.setupEventListeners();
    }

    // ... diğer metodlar
}

class GameError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}

async function errorHandler(fn) {
    try {
        await fn();
    } catch (error) {
        console.error('Hata:', error);
        // Kullanıcıya uygun hata mesajı göster
        showError(error);
    }
}
